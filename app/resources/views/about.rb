require_relative "../../../config/environment.rb"

def about
  clear_screen
  
  puts "\nABOUT 'THE BOARD'\n"

  puts "(press enter to retuen to main menu)\n"

  puts "COLLABORATORS:"
  puts "  - Michelle Frattaroli"
  puts "  - Kat Maldon"
  puts ""
  puts "PURPOSE AND STORY"
  puts "  The menu navigation guides the dispatcher through a seamless user experience,"
  puts "    offering simple prompts every step of the way. THE BOARD makes it easy to"
  puts "    keep track of existing jobs, enter and update information, and change the"
  puts "    status and details of all your couriers, clients, and tickets."
  puts "  We keep your operation running smoothly."
  puts ""
  puts "  Messenger companies provide real-time delivery service in tight time frames, providing a valueable service in cities all over the world."
  puts "  This is often a fast-paced work environment with many moving pieces that dispatchers must track."
  puts "  Dispatchers use a job board to track all of their clients, tickets, and couriers, to make sure everything gets to where its supposed to, on time."
  puts ""
  puts "  This application comes as the Mod 1 Project for Flatiron School's Software Engineering Boot Camp"
  puts "  It is the culmination of lessons on Ruby, relational models, ActiveRedord and SQLite."
  puts ""
  puts "  It is built in a single-user format, where 'user' would be the dispatcher at a courier company."
  puts "  The dispatcher is looking at their active couriers and incomplete jobs, assigning tickets to couriers that match the packages they're already holding."
  puts "  When a client calls in a new delivery request, the dispatcher enters the ticket into the computer, associates it with the client and assigns it to a courier"
  puts "  If a client isn't registered, an account can be created, or the ticket can be submitted as a 'GUEST'"
  puts "  After the courier has delivered a package, they call in to dispatch and prove the 'pod' or 'point of delivery' The dispatcher then adds that info and marks the ticket complete."
  puts ""
  puts "  The user has the ability to create new clients, couriers and tickets, read them in different permeatations, edit them both with built in. commonly used methods (like assign) or through manual forms, as well as to delete unneeded instances."
  puts ""
  puts "MODELS:"
  puts "  This application uses three models:"
  puts "    - Ticket: belongs to courier and belongs to client"
  puts "    - Courier: Has many tickets and many clients through tickets"
  puts "    - Client: Has many tickets and many couriers through tickets"
  puts "  The courier and client models are pretty straight forwars, just containing basic information about the clients and methods to access tickets associated with them in different arrangements."
  puts "  The ticket model takes pickup and drop off information, delilvery status, details pertaining to that job and foreign ids"
  puts "    - If @rush is set to 'true', the time_due will be 1 hour after time ready, else it will be three hours."
  puts ""
  puts "FOR FULL USAGE INFORMAATION, CONSULT THE README"
  puts ""
  puts "UPCOMING FEATURES:"
  puts "  - Allow for manual entery of datetime for time ready, time due, dropoff time by converting a user-entered string ('04/01/2020' or '18:30') into a Time object"
  puts "  - Implement feature to allow searching for couriers and clients by name, address, etc."
  puts "  - Allow for sorting methods to change the order lists of instances are printed"
  puts "  - Set maximum number of items displayed per page with prev/next menu options to page through"
  puts "  - Rebuild edit instance forms using the class model implemented for new instance forms"
  puts ""
  puts "KNOWN BUGS"
  puts "  - Time instances seem to switch between UTC and local. Creates issues especially with the makers that say if a ticket is late."
  puts "  - NewTicket class' add notes will append new notes (by design) but will not allow an already inserted not to be removed"

  gets
  main_menu
end
